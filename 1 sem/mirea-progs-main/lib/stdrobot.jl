using HorizonSideRobots

# –ó–ê–ò–ù–ö–õ–Æ–î–¨ –ú–ï–ù–Ø ü•µ

#		–∫–æ–º–ø–∞—Å
#
#	         Nord (0)
#
#	West (1)   X   Ost (3)
#	
#	          Sud (2)

# –°—Ç–æ—Ä–æ–Ω–∞ —Å–≤–µ—Ç–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É X
tox(side::HorizonSide) =
	Int(side) % 2 == 0 ? 0 : Int(side) - 2

# –°—Ç–æ—Ä–æ–Ω–∞ —Å–≤–µ—Ç–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É Y
toy(side::HorizonSide) =
	Int(side) % 2 == 0 ? Int(side) - 1 : 0

#–æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
inverse(side::HorizonSide) =
    HorizonSide( ( Int(side) + 2 ) % 4 )

#–ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ª–µ–≤–æ
left(side::HorizonSide) = 
	HorizonSide( ( Int(side) + 1 ) % 4 )

#–ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ø—Ä–∞–≤–æ
right(side::HorizonSide) =
	Int(side) < 1 ? HorizonSide(3) : HorizonSide( Int(side) - 1 )

#–ø—Ä–æ–π—Ç–∏ –¥–æ —É–ø–æ—Ä–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
along!(robot::Robot,side::HorizonSide) =
    while !isborder(robot,side)
        move!(robot,side)
    end

#–ø—Ä–æ–π—Ç–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å —É–∫–∞–∑–∞–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤
along!(robot::Robot,side::HorizonSide,num_steps::Integer) =
    for _ in 1:num_steps move!(robot,side) end
	
#–ø—Ä–æ–π—Ç–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—ë—Ç true 
along!(stop_condition::Function,robot::Robot,side::HorizonSide) =
	while stop_condition(robot) move!(robot,side) end

#–ø—Ä–æ–π—Ç–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—ë—Ç true –∏–ª–∏ –Ω–µ –∫–æ–Ω—á–∞—Ç—Å—è —à–∞–≥–∏
function along!(stop_condition::Function,robot::Robot,side::HorizonSide,num_steps::Integer)
	for _ in 1:num_steps
		if stop_condition(robot) return end
		move!(robot,side)
	end
end

#–∏–¥—Ç–∏ –¥–æ —É–ø–æ—Ä–∞ –∏ —Å—á–∏—Ç–∞—Ç—å —à–∞–≥–∏
function numsteps!(robot::Robot,side::HorizonSide)
    num_steps = 0
    while !isborder(robot,side)
        move!(robot,side)
        num_steps += 1
    end
    num_steps
end

#–∏–¥—Ç–∏ –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å—á–∏—Ç–∞—Ç—å —à–∞–≥–∏
function numsteps!(stop_condition::Function,robot::Robot,side::HorizonSide)
    num_steps = 0
    while !isborder(robot,side) && !stop_condition(robot)
        move!(robot,side)
        num_steps += 1
    end
    num_steps
end

#–∏–¥—Ç–∏ –¥–æ —É–ø–æ—Ä–∞ –∏ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä—ã
# 1. –î–µ–ª–∞–µ–º —à–∞–≥
# 2. –°—Ç–∞–≤–∏–º –º–∞—Ä–∫–µ—Ä
function putmarkers!(robot::Robot,side::HorizonSide)
    while !isborder(robot,side)
        move!(robot,side)
        putmarker!(robot)
    end
end

#–∏–¥—Ç–∏ –¥–æ —É–ø–æ—Ä–∞ –∏ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä—ã —Å —É–∫–∞–∑–∞–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤
# 1. –î–µ–ª–∞–µ–º —à–∞–≥
# 2. –°—Ç–∞–≤–∏–º –º–∞—Ä–∫–µ—Ä
function putmarkers!(robot::Robot,side::HorizonSide,num_steps::Integer)
	for _ in 1:num_steps
		move!(robot,side)
		putmarker!(robot)
	end
end

#–∏–¥—Ç–∏ –¥–æ —É–ø–æ—Ä–∞, —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä—ã –∏ –ø–æ—Å—á–∏—Ç–∞—Ç—å —à–∞–≥–∏
function numsteps_putmarkers!(robot::Robot,side::HorizonSide)
    num_steps = 0
    while !isborder(robot,side)
        move!(robot,side)
        num_steps += 1
        putmarker!(robot)
    end
    num_steps
end

#—Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä—ã –≤–¥–æ–ª—å –≥—Ä–∞–Ω–∏—Ü—ã –∏ —Å–¥–µ–ª–∞—Ç—å —à–∞–≥ –¥–∞–ª—å—à–µ
function putmarkers_border!(robot::Robot,borderSide::HorizonSide,move_side::HorizonSide)
	while isborder(robot,borderSide)
		putmarker!(robot)
		move!(robot,move_side)
	end
end

function snake!(robot::Robot,move_side::HorizonSide,next_row_side::HorizonSide)
	while !isborder(robot,move_side)
		along!(robot,move_side)

		if isborder(robot,next_row_side) return end

		move_side = inverse(move_side)
		move!(robot,next_row_side)
	end
end

#–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ —Å–ø–∏—Ä–∞–ª–∏
function spiral!(stop_condition::Function,robot::Robot,side::HorizonSide = Ost)
	dist = 1

	while true
		for _ in 1:2
			if stop_condition(robot) return end

			along!(stop_condition,robot,side,dist)
			side = left(side)
		end

		dist += 1
	end
end

function shatl!(stop_condition::Function, robot::Robot)
	while !stop_condition(robot)
		#move!(robot,) –∫—É–¥–∞?
	end
end
